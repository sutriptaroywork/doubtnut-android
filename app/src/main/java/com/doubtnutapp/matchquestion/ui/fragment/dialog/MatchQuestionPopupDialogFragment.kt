package com.doubtnutapp.matchquestion.ui.fragment.dialogimport android.graphics.Colorimport android.graphics.drawable.ColorDrawableimport android.os.Bundleimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.core.content.ContextCompatimport androidx.core.os.bundleOfimport androidx.recyclerview.widget.GridLayoutManagerimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport com.doubtnutapp.Rimport com.doubtnut.core.utils.activityViewModelProviderimport com.doubtnutapp.apiErrorToastimport com.doubtnutapp.base.extension.observeKimport com.doubtnutapp.databinding.FragmentMatchQuestionPopupDialogBindingimport com.doubtnutapp.matchquestion.model.ApiFeedbackResponseDataimport com.doubtnutapp.matchquestion.model.ApiPopupDataimport com.doubtnutapp.matchquestion.model.ApiSubmitFeedbackPreferenceimport com.doubtnutapp.matchquestion.model.FeedbackDialogAdapterTypeimport com.doubtnutapp.matchquestion.ui.adapter.PopupOptionsAdapterimport com.doubtnutapp.matchquestion.viewmodel.MatchQuestionViewModelimport com.doubtnutapp.setVisibleStateimport com.doubtnutapp.ui.base.BaseBindingDialogFragmentimport com.doubtnutapp.utils.showApiErrorToastimport com.doubtnutapp.utils.showToastclass MatchQuestionPopupDialogFragment :    BaseBindingDialogFragment<MatchQuestionViewModel, FragmentMatchQuestionPopupDialogBinding>() {    companion object {        const val TAG = "MatchQuestionPopupDialogFragment"        const val QUESTION_ID = "question_id"        const val PAGE_SRP = "SRP"        const val NO_VIDEO_WATCHED = "no_video_watched"        fun newInstance(            questionId: String        ) = MatchQuestionPopupDialogFragment().apply {            arguments = bundleOf(                QUESTION_ID to questionId            )        }    }    private val questionId: Long by lazy { arguments?.getLong(QUESTION_ID) ?: 0 }    override fun onStart() {        super.onStart()        dialog?.window            ?.setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);        dialog?.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT));        isCancelable = false    }    override fun providePageName(): String = TAG    override fun provideViewModel(): MatchQuestionViewModel =        activityViewModelProvider(viewModelFactory)    override fun provideViewBinding(        inflater: LayoutInflater,        container: ViewGroup?    ): FragmentMatchQuestionPopupDialogBinding =        FragmentMatchQuestionPopupDialogBinding.inflate(layoutInflater)    override fun setupView(view: View, savedInstanceState: Bundle?) {        binding.close.setOnClickListener {            dismiss()        }    }    override fun setupObservers() {        super.setupObservers()        viewModel.popupFeedbackLiveData.observe(            viewLifecycleOwner,            this::onSuccessPopupFeedbackDataFetchResponse        )        viewModel.submitFeedbackPreferenceLiveData.observeK(            viewLifecycleOwner,            this::onSuccessFeedbackPopupResponse,            this::onApiError,            this::unAuthorizeUserError,            this::ioExceptionHandler,            this::updateProgress        )    }    private fun onSuccessPopupFeedbackDataFetchResponse(data: ApiFeedbackResponseData) {        if (data.options.size > 0) {            val popupOptionsAdapter = PopupOptionsAdapter(data.options) { optionSelected ->                val colorOrange = ContextCompat.getColor(requireContext(), R.color.color_eb532c)                binding.btnSubmit.setTextColor(colorOrange)                binding.btnSubmit.setOnClickListener {                    handleSubmitButtonClick(questionId, optionSelected)                }            }            val recyclerView = binding.rv            var layoutManager: RecyclerView.LayoutManager = LinearLayoutManager(requireActivity())            data.feedbackDialogAdapterType?.let {                if (data.feedbackDialogAdapterType == FeedbackDialogAdapterType.GRID) {                    layoutManager = GridLayoutManager(requireActivity(), 2)                }            }            recyclerView.layoutManager = layoutManager            recyclerView.adapter = popupOptionsAdapter            binding.btnSubmit.text = data.buttonText            binding.title.text = data.title            viewModel.isPopupFeedbackDialogAlreadyShown = true            val colorGrey = ContextCompat.getColor(requireContext(), R.color.grey_808080)            binding.btnSubmit.setTextColor(colorGrey)            binding.close.setOnClickListener {                //make dialog close api call as well                viewModel.submitPopupSelection(                    PAGE_SRP,                    "",                    questionId,                    true,                    ""                )            }        } else {            dismiss()        }    }    private fun handleSubmitButtonClick(questionId: Long, optionSelected: ApiPopupData.Option) {        if (viewModel.isFeedbackOptionSelectedByUser) {            viewModel.submitPopupFeedbackSelection(                PAGE_SRP,                optionSelected.type,                questionId            )        } else {            viewModel.submitPopupSelection(                PAGE_SRP,                optionSelected.type,                questionId,                false,                optionSelected.display            )        }    }    private fun onSuccessFeedbackPopupResponse(data: ApiSubmitFeedbackPreference?) {        dismiss()        data?.let {            showToast(requireContext(), it.message)        }    }    private fun onApiError(e: Throwable) {        apiErrorToast(e)        dismiss()    }    private fun ioExceptionHandler() {        showApiErrorToast(requireContext())        dismiss()    }    private fun unAuthorizeUserError() {        showApiErrorToast(requireContext())        dismiss()    }    private fun updateProgress(state: Boolean) {        binding.progressBar.setVisibleState(state)    }}